trigger:
  - dev
  - main

stages:
- stage: Build
  jobs:
  - job: BuildAndTest
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: "20.x"
      displayName: "Install Node.js"

    - script: |
        npm install
      displayName: "Install dependencies"

    - script: |
        npm run test:ci
      displayName: "Run tests"
      continueOnError: true

    # Split the build into separate archives
    - script: |
        echo "Building application..."
        npm run build
        
        # Create separate directories
        mkdir -p dist_app
        mkdir -p dist_modules
        
        # Copy app files
        cp -r dist/* dist_app/
        cp web.config dist_app/
        cp package.json dist_app/
        
        # Copy and clean node_modules
        cp -r node_modules dist_modules/
        cd dist_modules
        find . -name "*.md" -type f -delete
        find . -name "*.txt" -type f -delete
        find . -name "*.map" -type f -delete
        find . -name "LICENSE" -type f -delete
        find . -name "*.ts" -type f -delete
        find . -type d -name "test" -exec rm -rf {} +
        find . -type d -name "tests" -exec rm -rf {} +
        find . -type d -name "docs" -exec rm -rf {} +
        find . -type d -name "example" -exec rm -rf {} +
        find . -type d -name "examples" -exec rm -rf {} +
      displayName: 'Prepare deployment files'

    # Archive app files
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/dist_app'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/app.zip'
        replaceExistingArchive: true
      displayName: 'Archive App Files'

    # Archive node_modules
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/dist_modules'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/modules.zip'
        replaceExistingArchive: true
      displayName: 'Archive Node Modules'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

- stage: DeployToStaging
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: DeployToStaging
    pool:
      vmImage: ubuntu-latest
    environment: 'staging'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'drop'
              downloadPath: '$(System.ArtifactsDirectory)'

          - task: AzureCLI@2
            inputs:
              azureSubscription: 'incident-reporting-system'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Stop the web app
                az webapp stop --name incident-report-system --resource-group incident-reporting-system
                
                # Deploy node_modules first
                echo "Deploying node_modules..."
                az webapp deploy --resource-group incident-reporting-system --name incident-report-system --src-path "$(System.ArtifactsDirectory)/drop/modules.zip" --target-path /node_modules --clean true
                
                # Deploy app files
                echo "Deploying application files..."
                az webapp deploy --resource-group incident-reporting-system --name incident-report-system --src-path "$(System.ArtifactsDirectory)/drop/app.zip" --clean false
                
                # Start the web app
                az webapp start --name incident-report-system --resource-group incident-reporting-system

          - task: AzureAppServiceSettings@1
            inputs:
              azureSubscription: 'incident-reporting-system'
              appName: 'incident-report-system'
              resourceGroupName: 'incident-reporting-system'
              appSettings: |
                [
                  {
                    "name": "WEBSITE_NODE_DEFAULT_VERSION",
                    "value": "20.x",
                    "slotSetting": false
                  },
                  {
                    "name": "NODE_ENV",
                    "value": "production",
                    "slotSetting": false
                  }
                ]