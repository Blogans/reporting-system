trigger:
  - dev
  - main

stages:
- stage: Build
  jobs:
  - job: BuildAndTest
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: "20.x"
      displayName: "Install Node.js"

    - script: |
        npm install
      displayName: "Install dependencies"

    - script: |
        npm run test:ci
      displayName: "Run tests"
      continueOnError: true

    - script: |
        echo "Building application..."
        npm run build
        echo "Copying files to dist..."
        cp web.config dist/
        cp package.json dist/
        cp -r node_modules dist/
        echo "Removing unnecessary files from node_modules..."
        cd dist/node_modules
        find . -name "*.md" -type f -delete
        find . -name "*.txt" -type f -delete
        find . -name "*.map" -type f -delete
        find . -name "LICENSE" -type f -delete
        find . -name "*.ts" -type f -delete
        find . -type d -name "test" -exec rm -rf {} +
        find . -type d -name "tests" -exec rm -rf {} +
        find . -type d -name "docs" -exec rm -rf {} +
        find . -type d -name "example" -exec rm -rf {} +
        find . -type d -name "examples" -exec rm -rf {} +
      displayName: 'Build and prepare dist'

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/dist'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
        replaceExistingArchive: true
        verbose: false
      displayName: 'Archive Files'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

- stage: DeployToStaging
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: DeployToStaging
    pool:
      vmImage: ubuntu-latest
    environment: 'staging'
    strategy:
      runOnce:
        deploy:
          steps:
          - script: |
              echo "Current directory structure before download:"
              pwd
              ls -la
              echo "System.ArtifactsDirectory: $(System.ArtifactsDirectory)"
              echo "Build.ArtifactStagingDirectory: $(Build.ArtifactStagingDirectory)"
            displayName: 'Debug: Pre-download check'

          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'drop'
              downloadPath: '$(System.ArtifactsDirectory)'
         
          - script: |
              echo "Checking downloaded artifacts:"
              ls -la $(System.ArtifactsDirectory)
              echo "Checking drop directory:"
              ls -la $(System.ArtifactsDirectory)/drop
              echo "Looking for zip files:"
              find $(System.ArtifactsDirectory) -name "*.zip"
              echo "Full directory tree:"
              tree $(System.ArtifactsDirectory)
            displayName: 'Debug: Post-download check'

          - task: AzureWebApp@1
            timeoutInMinutes: 10
            inputs:
              appType: webAppLinux
              azureSubscription: 'incident-reporting-system'
              appName: 'incident-report-system'
              package: '$(System.ArtifactsDirectory)/drop/*.zip'