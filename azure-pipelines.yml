trigger:
  - dev
  - main

stages:
- stage: Build
  jobs:
  - job: BuildAndTest
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: "20.x"
      displayName: "Install Node.js"

    - script: |
        # Install dependencies and build
        sudo apt-get update
        sudo apt-get install -y jq
        
        # Remove self-reference before install
        jq 'del(.dependencies["incident-reporting-system"])' package.json > temp-package.json
        mv temp-package.json package.json
        
        npm install
        npm run build
        
        # Create deployment directory
        mkdir deploy
        
        # Copy server files
        mkdir -p deploy/server
        cp -r dist/server/* deploy/server/
        
        # Copy client files to root
        cp -r dist/* deploy/
        
        # Copy node_modules and clean them up
        cp -r node_modules deploy/
        cd deploy/node_modules
        
        # Remove self-reference directory if it exists
        rm -rf incident-reporting-system
        
        # Clean up node_modules
        find . -name "*.md" -type f -delete
        find . -name "*.txt" -type f -delete
        find . -name "*.map" -type f -delete
        find . -name "LICENSE" -type f -delete
        find . -name "*.ts" -type f -delete
        find . -type d -name "test" -exec rm -rf {} +
        find . -type d -name "tests" -exec rm -rf {} +
        find . -type d -name "docs" -exec rm -rf {} +
        find . -type d -name "example" -exec rm -rf {} +
        find . -type d -name "examples" -exec rm -rf {} +
        cd ../..
        
        # Copy support files
        cp web.config deploy/
        cp package.json deploy/
        
        echo "Deploy directory contents:"
        ls -la deploy/
        echo "Deploy directory size:"
        du -sh deploy/
      displayName: 'Prepare build'

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/deploy'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
        replaceExistingArchive: true
      displayName: 'Archive Files'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

- stage: Deploy
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: Deploy
    pool:
      vmImage: ubuntu-latest
    environment: 'staging'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            inputs:
              azureSubscription: 'incident-reporting-system'
              appName: 'incident-report-system'
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
              deploymentMethod: 'zipDeploy'
              appSettings: |
                [
                  {
                    "name": "WEBSITE_NODE_DEFAULT_VERSION",
                    "value": "~20",
                    "slotSetting": false
                  },
                  {
                    "name": "SCM_DO_BUILD_DURING_DEPLOYMENT",
                    "value": "false",
                    "slotSetting": false
                  }
                ]