trigger:
  branches:
    include:
    - main
    - develop

variables:
  azureSubscription: 'incident-report'
  webAppName: 'incident-report'
  environmentName: 'production'
  vmImageName: 'windows-latest'
  nodeVersion: '18.x'

stages:
- stage: Test
  displayName: Test Stage
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/develop')
  jobs:
  - job: Test
    displayName: Run Tests
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: $(nodeVersion)
      displayName: 'Install Node.js'

    - script: |
        npm install
      displayName: 'Install Dependencies'

    - script: |
        npm run test:ci
      displayName: 'Run Tests'
      continueOnError: true
      env:
        NODE_ENV: 'test'

    - task: PublishTestResults@2
      displayName: 'Publish Test Results'
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'junit.xml'
        mergeTestResults: true
        failTaskOnFailedTests: false
      condition: succeededOrFailed()

    - task: PublishCodeCoverageResults@2
      displayName: 'Publish Code Coverage'
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(Build.SourcesDirectory)/coverage/cobertura-coverage.xml'
        pathToSources: '$(Build.SourcesDirectory)'
        failIfCoverageEmpty: false
      condition: succeededOrFailed()

- stage: Build
  displayName: Build Stage
  condition: or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), and(eq(variables['Build.SourceBranch'], 'refs/heads/develop'), succeeded('Test')))
  jobs:
  - job: Build
    displayName: Build Job
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: $(nodeVersion)
      displayName: 'Install Node.js'

    - script: |
        npm install
      displayName: 'Install Dependencies'

    - script: |
        npm run build
      displayName: 'Build Application'

    - script: |
        mkdir deployment
        cp -r dist/* deployment/
        cp -r node_modules deployment/
        cp web.config deployment/
        cp package.json deployment/
      displayName: 'Prepare Deployment Files'
     
    - task: ArchiveFiles@2
      displayName: 'Archive Files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/deployment'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
        replaceExistingArchive: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Build Artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

- stage: Deploy
  displayName: Deploy Stage
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: Deploy
    displayName: Deploy Job
    environment: $(environmentName)
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@1
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'drop'
              downloadPath: '$(System.ArtifactStagingDirectory)'

          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: $(azureSubscription)
              appName: $(webAppName)
              package: '$(System.ArtifactStagingDirectory)/drop/$(Build.BuildId).zip'
              appType: 'webApp'
              deploymentMethod: 'auto'